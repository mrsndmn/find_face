{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport getClassName from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\nvar baseClassName = getClassName('Tabs');\n\nvar Tabs =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Tabs, _React$Component);\n\n  function Tabs() {\n    _classCallCheck(this, Tabs);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Tabs).apply(this, arguments));\n  }\n\n  _createClass(Tabs, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n\n      var _this$props = this.props,\n          className = _this$props.className,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          type = _this$props.type,\n          getRootRef = _this$props.getRootRef,\n          restProps = _objectWithoutProperties(_this$props, [\"className\", \"children\", \"theme\", \"style\", \"type\", \"getRootRef\"]);\n\n      return React.createElement(\"div\", _extends({}, restProps, {\n        ref: getRootRef,\n        className: classNames(baseClassName, (_classNames = {}, _defineProperty(_classNames, \"Tabs--\".concat(this.theme), true), _defineProperty(_classNames, \"Tabs--\".concat(type), true), _classNames), className),\n        style: style\n      }), children);\n    }\n  }, {\n    key: \"theme\",\n\n    /**\n     * Метод нужен для маппинга устаревших значений theme на новые\n     * @returns {string}\n     */\n    get: function get() {\n      switch (this.props.theme) {\n        case 'white':\n          return 'header';\n\n        case 'gray':\n          return 'light';\n\n        default:\n          return this.props.theme;\n      }\n    }\n  }]);\n\n  return Tabs;\n}(React.Component);\n\n_defineProperty(Tabs, \"propTypes\", {\n  children: PropTypes.node,\n  className: PropTypes.string,\n\n  /**\n   * Значения white и gray устарели. Они будут удалены в следующей мажорной версии\n   */\n  theme: PropTypes.oneOf(['light', 'header']),\n\n  /**\n   * Свойство отвечает за растягивание табов\n   */\n  type: PropTypes.oneOf(['default', 'buttons']),\n  style: PropTypes.object,\n  getRootRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.any\n  })])\n});\n\n_defineProperty(Tabs, \"defaultProps\", {\n  theme: 'light',\n  type: 'default'\n});\n\nexport { Tabs as default };","map":null,"metadata":{},"sourceType":"module"}