{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport React, { Component } from 'react';\nimport getClassName from '../../helpers/getClassName';\nimport Touch from '../Touch/Touch';\nimport classNames from '../../lib/classNames';\nimport withPlatform from '../../hoc/withPlatform';\nimport { canUseDOM } from '../../lib/dom';\n\nvar Gallery =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Gallery, _Component);\n\n  function Gallery(props) {\n    var _this;\n\n    _classCallCheck(this, Gallery);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Gallery).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"container\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"slidesStore\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"viewport\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"timeout\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"isChildrenDirty\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"go\", function (targetIndex) {\n      _this.setState({\n        animation: true,\n        shiftX: _this.calculateIndent(targetIndex),\n        current: targetIndex\n      });\n\n      if (_this.timeout) {\n        _this.clearTimeout();\n\n        _this.setTimeout(_this.props.autoplay);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onStart\", function (e) {\n      _this.setState({\n        animation: false,\n        startT: e.startT\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMoveX\", function (e) {\n      if (_this.isDraggable()) {\n        e.originalEvent.preventDefault();\n\n        if (e.isSlideX) {\n          _this.props.onDragStart && _this.props.onDragStart();\n\n          if (_this.state.deltaX !== e.shiftX || _this.state.dragging !== e.isSlideX) {\n            _this.setState({\n              deltaX: e.shiftX,\n              dragging: e.isSlideX\n            });\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEnd\", function (e) {\n      var targetIndex = e.isSlide ? _this.getTarget() : _this.state.current;\n      _this.props.onDragEnd && _this.props.onDragEnd();\n\n      _this.setState({\n        shiftX: _this.calculateIndent(targetIndex),\n        deltaX: 0,\n        animation: true,\n        current: targetIndex\n      });\n\n      if (_this.props.onEnd) {\n        _this.props.onEnd({\n          targetIndex: targetIndex\n        });\n      }\n\n      if (_this.timeout) {\n        _this.clearTimeout();\n\n        _this.setTimeout(_this.props.autoplay);\n      }\n\n      return true;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResize\", function () {\n      _this.initializeSlides();\n\n      var _this$state = _this.state,\n          layerWidth = _this$state.layerWidth,\n          slides = _this$state.slides;\n      var containerWidth = _this.container.current.offsetWidth;\n      var viewportWidth = _this.viewport.offsetWidth;\n\n      _this.setState({\n        shiftX: _this.calculateIndent(_this.state.current),\n        containerWidth: containerWidth,\n        min: _this.calcMin({\n          layerWidth: layerWidth,\n          containerWidth: containerWidth,\n          viewportWidth: viewportWidth,\n          slides: slides\n        }),\n        max: _this.calcMax({\n          viewportWidth: viewportWidth,\n          slides: slides\n        }),\n        animation: false\n      }, function () {\n        window.requestAnimationFrame(function () {\n          return _this.setState({\n            animation: true\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setTimeout\", function (duration) {\n      if (canUseDOM) {\n        _this.timeout = window.setTimeout(function () {\n          var _this$state2 = _this.state,\n              slides = _this$state2.slides,\n              current = _this$state2.current;\n          var targetIndex = current < slides.length - 1 ? current + 1 : 0;\n\n          _this.go(targetIndex);\n        }, duration);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearTimeout\", function () {\n      clearTimeout(_this.timeout);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getSlideRef\", function (id) {\n      return function (slide) {\n        _this.slidesStore[\"slide-\".concat(id)] = slide;\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getViewportRef\", function (viewport) {\n      _this.viewport = viewport ? viewport.container : {};\n    });\n\n    var _current = typeof props.slideIndex === 'number' ? props.slideIndex : props.initialSlideIndex;\n\n    _this.state = {\n      containerWidth: 0,\n      current: _current,\n      deltaX: 0,\n      shiftX: 0,\n      slides: [],\n      animation: false,\n      duration: 0.24\n    };\n    _this.container = React.createRef();\n    _this.slidesStore = {};\n    return _this;\n  }\n\n  _createClass(Gallery, [{\n    key: \"initializeSlides\",\n    value: function initializeSlides() {\n      var _this2 = this;\n\n      var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};\n      var slides = React.Children.map(this.props.children, function (_item, i) {\n        var elem = _this2.slidesStore[\"slide-\".concat(i)];\n\n        return {\n          coordX: elem.offsetLeft,\n          width: elem.offsetWidth\n        };\n      });\n      var containerWidth = this.container.current.offsetWidth;\n      var viewportWidth = this.viewport.offsetWidth;\n      var layerWidth = slides.reduce(function (val, slide) {\n        return slide.width + val;\n      }, 0);\n      var min = this.calcMin({\n        containerWidth: containerWidth,\n        layerWidth: layerWidth,\n        viewportWidth: viewportWidth,\n        slides: slides\n      });\n      var max = this.calcMax({\n        viewportWidth: viewportWidth,\n        slides: slides\n      });\n      this.setState({\n        min: min,\n        max: max,\n        layerWidth: layerWidth,\n        containerWidth: containerWidth,\n        slides: slides\n      }, callback);\n    }\n  }, {\n    key: \"calcMin\",\n    value: function calcMin(_ref) {\n      var containerWidth = _ref.containerWidth,\n          layerWidth = _ref.layerWidth,\n          viewportWidth = _ref.viewportWidth,\n          slides = _ref.slides;\n\n      switch (this.props.align) {\n        case 'left':\n          return containerWidth - layerWidth;\n\n        case 'right':\n          return viewportWidth - layerWidth;\n\n        case 'center':\n          if (this.isCenterWithCustomWidth && slides.length) {\n            var _slides = slides[slides.length - 1],\n                coordX = _slides.coordX,\n                width = _slides.width;\n            return viewportWidth / 2 - coordX - width / 2;\n          } else {\n            return viewportWidth - (containerWidth - viewportWidth) / 2 - layerWidth;\n          }\n\n      }\n    }\n  }, {\n    key: \"calcMax\",\n    value: function calcMax(_ref2) {\n      var viewportWidth = _ref2.viewportWidth,\n          slides = _ref2.slides;\n\n      if (this.isCenterWithCustomWidth && slides.length) {\n        var _slides$ = slides[0],\n            width = _slides$.width,\n            coordX = _slides$.coordX;\n        return viewportWidth / 2 - coordX - width / 2;\n      } else {\n        return 0;\n      }\n    }\n    /**\n     * Считает отступ слоя галереи\n     * @param {Number} targetIndex ID целевого слайда\n     * @returns {Number} Значения отступа\n     */\n\n  }, {\n    key: \"calculateIndent\",\n    value: function calculateIndent(targetIndex) {\n      var slides = this.state.slides;\n\n      if (!this.isDraggable()) {\n        return 0;\n      }\n\n      var targetSlide = slides.length ? slides[targetIndex] : null;\n\n      if (targetSlide) {\n        var coordX = targetSlide.coordX,\n            width = targetSlide.width;\n\n        if (this.isCenterWithCustomWidth) {\n          var viewportWidth = this.viewport.offsetWidth;\n          return viewportWidth / 2 - coordX - width / 2;\n        }\n\n        return this.validateIndent(-1 * coordX);\n      } else {\n        return 0;\n      }\n    }\n    /**\n     * Считает отступ слоя галереи во время драга\n     * @returns {Number} Значения отступа\n     */\n\n  }, {\n    key: \"calculateDragIndent\",\n    value: function calculateDragIndent() {\n      var _this$state3 = this.state,\n          shiftX = _this$state3.shiftX,\n          deltaX = _this$state3.deltaX,\n          min = _this$state3.min,\n          max = _this$state3.max;\n      var indent = shiftX + deltaX;\n\n      if (indent > max) {\n        return max + Number((indent - max) / 3);\n      } else if (indent < min) {\n        return min + Number((indent - min) / 3);\n      }\n\n      return indent;\n    }\n  }, {\n    key: \"validateIndent\",\n    value: function validateIndent(value) {\n      var _this$state4 = this.state,\n          min = _this$state4.min,\n          max = _this$state4.max;\n\n      if (value < min) {\n        return min;\n      } else if (value > max) {\n        return max;\n      }\n\n      return value;\n    }\n  }, {\n    key: \"isDraggable\",\n    value: function isDraggable() {\n      return this.state.layerWidth > this.state.containerWidth;\n    }\n    /**\n     * Получает индекс слайда, к которому будет осуществлен переход\n     * @returns {Number} Индекс слайда\n     */\n\n  }, {\n    key: \"getTarget\",\n    value: function getTarget() {\n      var _this$state5 = this.state,\n          slides = _this$state5.slides,\n          current = _this$state5.current,\n          deltaX = _this$state5.deltaX,\n          shiftX = _this$state5.shiftX,\n          startT = _this$state5.startT,\n          max = _this$state5.max;\n      var expectDeltaX = deltaX / (Date.now() - startT) * 240 * 0.6;\n      var shift = shiftX + deltaX + expectDeltaX - max;\n      var direction = deltaX < 0 ? 1 : -1; // Находим ближайшую границу слайда к текущему отступу\n\n      var targetIndex = slides.reduce(function (val, item, index) {\n        var previousValue = Math.abs(slides[val].coordX + shift);\n        var currentValue = Math.abs(item.coordX + shift);\n        return previousValue < currentValue ? val : index;\n      }, current);\n\n      if (targetIndex === current) {\n        var targetSlide = current + direction;\n\n        if (targetSlide >= 0 && targetSlide < slides.length) {\n          if (Math.abs(deltaX) > slides[targetSlide].width * 0.05) {\n            targetIndex = targetSlide;\n          }\n        }\n      }\n\n      return targetIndex;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this3 = this;\n\n      this.initializeSlides(function () {\n        _this3.setState({\n          shiftX: _this3.calculateIndent(_this3.state.current)\n        });\n      });\n      window.addEventListener('resize', this.onResize);\n\n      if (this.props.autoplay) {\n        this.setTimeout(this.props.autoplay);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.children !== prevProps.children) {\n        this.isChildrenDirty = true;\n      }\n\n      if (this.isChildrenDirty) {\n        this.isChildrenDirty = false;\n        this.initializeSlides();\n      }\n\n      if (prevState.current !== this.state.current && this.props.onChange) {\n        this.props.onChange(this.state.current);\n      }\n\n      if (this.props.autoplay && !prevProps.autoplay) {\n        if (this.props.autoplay) {\n          this.setTimeout(this.props.autoplay);\n        }\n      }\n\n      if (!this.props.autoplay && prevProps.autoplay) {\n        this.clearTimeout();\n      }\n\n      if (this.props.slideIndex !== prevProps.slideIndex && typeof this.props.slideIndex === 'number') {\n        this.go(this.props.slideIndex);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('resize', this.onResize);\n      this.clearTimeout();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$state6 = this.state,\n          animation = _this$state6.animation,\n          duration = _this$state6.duration,\n          current = _this$state6.current,\n          dragging = _this$state6.dragging;\n\n      var _this$props = this.props,\n          children = _this$props.children,\n          slideWidth = _this$props.slideWidth,\n          autoplay = _this$props.autoplay,\n          initialSlideIndex = _this$props.initialSlideIndex,\n          slideIndex = _this$props.slideIndex,\n          onDragStart = _this$props.onDragStart,\n          onDragEnd = _this$props.onDragEnd,\n          onChange = _this$props.onChange,\n          onEnd = _this$props.onEnd,\n          align = _this$props.align,\n          bullets = _this$props.bullets,\n          className = _this$props.className,\n          platform = _this$props.platform,\n          restProps = _objectWithoutProperties(_this$props, [\"children\", \"slideWidth\", \"autoplay\", \"initialSlideIndex\", \"slideIndex\", \"onDragStart\", \"onDragEnd\", \"onChange\", \"onEnd\", \"align\", \"bullets\", \"className\", \"platform\"]);\n\n      var indent = dragging ? this.calculateDragIndent() : this.calculateIndent(current);\n      var layerStyle = {\n        WebkitTransform: \"translateX(\".concat(indent, \"px)\"),\n        transform: \"translateX(\".concat(indent, \"px)\"),\n        WebkitTransition: animation ? \"-webkit-transform \".concat(duration, \"s cubic-bezier(.1, 0, .25, 1)\") : 'none',\n        transition: animation ? \"transform \".concat(duration, \"s cubic-bezier(.1, 0, .25, 1)\") : 'none'\n      };\n      return React.createElement(\"div\", _extends({\n        className: classNames(getClassName('Gallery', platform), className, \"Gallery--\".concat(align), {\n          'Gallery--dragging': dragging,\n          'Gallery--custom-width': slideWidth === 'custom'\n        })\n      }, restProps, {\n        ref: this.container\n      }), React.createElement(Touch, {\n        className: \"Gallery__viewport\",\n        onStartX: this.onStart,\n        onMoveX: this.onMoveX,\n        onEnd: this.onEnd,\n        style: {\n          width: slideWidth === 'custom' ? '100%' : slideWidth\n        },\n        ref: this.getViewportRef\n      }, React.createElement(\"div\", {\n        className: \"Gallery__layer\",\n        style: layerStyle\n      }, React.Children.map(children, function (item, i) {\n        return React.createElement(\"div\", {\n          className: \"Gallery__slide\",\n          key: \"slide-\".concat(i),\n          ref: _this4.getSlideRef(i)\n        }, item);\n      }))), bullets && React.createElement(\"div\", {\n        className: classNames('Gallery__bullets', \"Gallery__bullets--\".concat(bullets))\n      }, React.Children.map(children, function (_item, index) {\n        return React.createElement(\"div\", {\n          className: classNames('Gallery__bullet', {\n            'Gallery__bullet--active': index === current\n          }),\n          key: index\n        });\n      })));\n    }\n  }, {\n    key: \"isCenterWithCustomWidth\",\n    get: function get() {\n      return this.props.slideWidth === 'custom' && this.props.align === 'center';\n    }\n  }]);\n\n  return Gallery;\n}(Component);\n\n_defineProperty(Gallery, \"defaultProps\", {\n  slideWidth: '100%',\n  children: '',\n  autoplay: 0,\n  initialSlideIndex: 0,\n  align: 'left',\n  bullets: false\n});\n\nexport default withPlatform(Gallery);","map":null,"metadata":{},"sourceType":"module"}