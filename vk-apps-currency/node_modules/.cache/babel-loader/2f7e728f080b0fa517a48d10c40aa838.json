{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(source, true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(source).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { getSupportedEvents, coordX, coordY, touchEnabled } from '../../lib/touch';\nvar events = getSupportedEvents();\n/**\n * Контекст для компонентов, использующих Touch в качестве корневой обёртки,\n * и для которых важно не предотвращать вспылие тач-событий от дочерних компонентов\n */\n\nexport var TouchRootContext = React.createContext(false);\n\nvar Touch =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Touch, _Component);\n\n  function Touch() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Touch);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Touch)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"cancelClick\", false);\n\n    _defineProperty(_assertThisInitialized(_this), \"gesture\", {});\n\n    _defineProperty(_assertThisInitialized(_this), \"onStart\", function (e) {\n      _this.gesture = {\n        startX: coordX(e),\n        startY: coordY(e),\n        startT: new Date(),\n        isPressed: true\n      }; // Вызываем нужные колбеки из props\n\n      var outputEvent = _objectSpread({}, _this.gesture, {\n        originalEvent: e\n      });\n\n      if (_this.props.onStart) {\n        _this.props.onStart(outputEvent);\n      }\n\n      if (_this.props.onStartX) {\n        _this.props.onStartX(outputEvent);\n      }\n\n      if (_this.props.onStartY) {\n        _this.props.onStartY(outputEvent);\n      }\n\n      !touchEnabled && _this.subscribe(_this.document);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMove\", function (e) {\n      var _this$gesture = _this.gesture,\n          isPressed = _this$gesture.isPressed,\n          isX = _this$gesture.isX,\n          isY = _this$gesture.isY,\n          startX = _this$gesture.startX,\n          startY = _this$gesture.startY;\n\n      if (isPressed) {\n        // смещения\n        var shiftX = coordX(e) - startX;\n        var shiftY = coordY(e) - startY; // абсолютные значения смещений\n\n        var shiftXAbs = Math.abs(shiftX);\n        var shiftYAbs = Math.abs(shiftY); // Если определяем мультитач, то прерываем жест\n\n        if (!!e.touches && e.touches.length > 1) {\n          return _this.onEnd(e);\n        } // если мы ещё не определились\n\n\n        if (!isX && !isY) {\n          var willBeX = shiftXAbs >= 5 && shiftXAbs > shiftYAbs;\n          var willBeY = shiftYAbs >= 5 && shiftYAbs > shiftXAbs;\n          var willBeSlidedX = willBeX && !!_this.props.onMoveX || !!_this.props.onMove;\n          var willBeSlidedY = willBeY && !!_this.props.onMoveY || !!_this.props.onMove;\n          _this.gesture.isY = willBeY;\n          _this.gesture.isX = willBeX;\n          _this.gesture.isSlideX = willBeSlidedX;\n          _this.gesture.isSlideY = willBeSlidedY;\n          _this.gesture.isSlide = willBeSlidedX || willBeSlidedY;\n        }\n\n        if (_this.gesture.isSlide) {\n          _this.gesture.shiftX = shiftX;\n          _this.gesture.shiftY = shiftY;\n          _this.gesture.shiftXAbs = shiftXAbs;\n          _this.gesture.shiftYAbs = shiftYAbs; // Вызываем нужные колбеки из props\n\n          var outputEvent = _objectSpread({}, _this.gesture, {\n            originalEvent: e\n          });\n\n          if (_this.props.onMove) {\n            _this.props.onMove(outputEvent);\n          }\n\n          if (_this.gesture.isSlideX && _this.props.onMoveX) {\n            _this.props.onMoveX(outputEvent);\n          }\n\n          if (_this.gesture.isSlideY && _this.props.onMoveY) {\n            _this.props.onMoveY(outputEvent);\n          }\n        }\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onEnd\", function (e) {\n      var _this$gesture2 = _this.gesture,\n          isPressed = _this$gesture2.isPressed,\n          isSlide = _this$gesture2.isSlide,\n          isSlideX = _this$gesture2.isSlideX,\n          isSlideY = _this$gesture2.isSlideY;\n\n      if (isPressed) {\n        // Вызываем нужные колбеки из props\n        var outputEvent = _objectSpread({}, _this.gesture, {\n          originalEvent: e\n        });\n\n        if (_this.props.onEnd) {\n          _this.props.onEnd(outputEvent);\n        }\n\n        if (isSlideY && _this.props.onEndY) {\n          _this.props.onEndY(outputEvent);\n        }\n\n        if (isSlideX && _this.props.onEndX) {\n          _this.props.onEndX(outputEvent);\n        }\n      } // Если закончили жест на ссылке, выставляем флаг для отмены перехода\n\n\n      _this.cancelClick = e.target.tagName === 'A' && isSlide;\n      _this.gesture = {};\n      !touchEnabled && _this.unsubscribe(_this.document);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragStart\", function (e) {\n      if (e.target.tagName === 'A' || e.target.tagName === 'IMG') {\n        e.preventDefault();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onClick\", function (e) {\n      if (_this.cancelClick) {\n        _this.cancelClick = false;\n        e.preventDefault();\n      }\n\n      _this.props.onClick && _this.props.onClick(e);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getRef\", function (container) {\n      _this.container = container;\n      var getRootRef = _this.props.getRootRef;\n\n      if (getRootRef) {\n        if (typeof getRootRef === 'function') {\n          getRootRef(container);\n        } else {\n          getRootRef.current = container;\n        }\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(Touch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.container.addEventListener(events[0], this.onStart, {\n        capture: this.props.useCapture,\n        passive: false\n      });\n      touchEnabled && this.subscribe(this.container);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.container.removeEventListener(events[0], this.onStart, {\n        capture: this.props.useCapture,\n        passive: false\n      });\n      touchEnabled && this.unsubscribe(this.container);\n    }\n    /**\n     * Обработчик событий touchstart\n     *\n     * @param {Object} e Браузерное событие\n     * @returns {void}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(element) {\n      element.addEventListener(events[1], this.onMove, {\n        capture: this.props.useCapture,\n        passive: false\n      });\n      element.addEventListener(events[2], this.onEnd, {\n        capture: this.props.useCapture,\n        passive: false\n      });\n      element.addEventListener(events[3], this.onEnd, {\n        capture: this.props.useCapture,\n        passive: false\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(element) {\n      element.removeEventListener(events[1], this.onMove, {\n        capture: this.props.useCapture,\n        passive: false\n      });\n      element.removeEventListener(events[2], this.onEnd, {\n        capture: this.props.useCapture,\n        passive: false\n      });\n      element.removeEventListener(events[3], this.onEnd, {\n        capture: this.props.useCapture,\n        passive: false\n      });\n    }\n    /**\n     * Обработчик событий dragstart\n     * Отменяет нативное браузерное поведение для вложенных ссылок и изображений\n     *\n     * @param {Object} e Браузерное событие\n     * @returns {void}\n     */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          onStart = _this$props.onStart,\n          onStartX = _this$props.onStartX,\n          onStartY = _this$props.onStartY,\n          onMove = _this$props.onMove,\n          onMoveX = _this$props.onMoveX,\n          onMoveY = _this$props.onMoveY,\n          onEnd = _this$props.onEnd,\n          onEndX = _this$props.onEndX,\n          onEndY = _this$props.onEndY,\n          useCapture = _this$props.useCapture,\n          component = _this$props.component,\n          getRootRef = _this$props.getRootRef,\n          restProps = _objectWithoutProperties(_this$props, [\"onStart\", \"onStartX\", \"onStartY\", \"onMove\", \"onMoveX\", \"onMoveY\", \"onEnd\", \"onEndX\", \"onEndY\", \"useCapture\", \"component\", \"getRootRef\"]);\n\n      var ComponentName = component;\n      return React.createElement(ComponentName, _extends({}, restProps, {\n        onDragStart: this.onDragStart,\n        onClick: this.onClick,\n        ref: this.getRef\n      }), this.props.children);\n    }\n  }, {\n    key: \"document\",\n    get: function get() {\n      return this.context.document || document;\n    }\n  }]);\n\n  return Touch;\n}(Component);\n\n_defineProperty(Touch, \"propTypes\", {\n  onStart: PropTypes.func,\n  onStartX: PropTypes.func,\n  onStartY: PropTypes.func,\n  onMove: PropTypes.func,\n  onMoveX: PropTypes.func,\n  onMoveY: PropTypes.func,\n  onEnd: PropTypes.func,\n  onEndX: PropTypes.func,\n  onEndY: PropTypes.func,\n  useCapture: PropTypes.bool,\n  component: PropTypes.string,\n  children: PropTypes.node,\n  onClick: PropTypes.func,\n  getRootRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({\n    current: PropTypes.node\n  })])\n});\n\n_defineProperty(Touch, \"defaultProps\", {\n  component: 'div',\n  children: '',\n  useCapture: false\n});\n\n_defineProperty(Touch, \"contextTypes\", {\n  document: PropTypes.any\n});\n\nexport { Touch as default };","map":null,"metadata":{},"sourceType":"module"}