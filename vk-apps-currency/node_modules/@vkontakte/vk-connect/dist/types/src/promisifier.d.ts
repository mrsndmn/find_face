import { VKConnectSend, VKConnectSubscribeOrUnsubscribe } from './';
/**
 * Returns send function that returns promises
 * @param send VK Connect send method
 * @param subscribe VK Connect subscribe method
 */
export declare const promisifySend: (send: VKConnectSend, subscribe: VKConnectSubscribeOrUnsubscribe) => <K extends "VKWebAppAddToCommunity" | "VKWebAppAllowMessagesFromGroup" | "VKWebAppAllowNotifications" | "VKWebAppCallAPIMethod" | "VKWebAppGetAuthToken" | "VKWebAppClose" | "VKWebAppOpenApp" | "VKWebAppDenyNotifications" | "VKWebAppFlashGetInfo" | "VKWebAppFlashSetLevel" | "VKWebAppGetClientVersion" | "VKWebAppGetCommunityToken" | "VKWebAppGetCommunityAuthToken" | "VKWebAppCommunityAccessToken" | "VKWebAppCommunityToken" | "VKWebAppGetEmail" | "VKWebAppGetFriends" | "VKWebAppGetGeodata" | "VKWebAppGetPersonalCard" | "VKWebAppGetPhoneNumber" | "VKWebAppGetUserInfo" | "VKWebAppJoinGroup" | "VKWebAppOpenCodeReader" | "VKWebAppOpenContacts" | "VKWebAppOpenPayForm" | "VKWebAppOpenQR" | "VKWebAppResizeWindow" | "VKWebAppScroll" | "VKWebAppSetLocation" | "VKWebAppSetViewSettings" | "VKWebAppShare" | "VKWebAppShowCommunityWidgetPreviewBox" | "VKWebAppShowImages" | "VKWebAppShowInviteBox" | "VKWebAppShowLeaderBoardBox" | "VKWebAppShowMessageBox" | "VKWebAppShowOrderBox" | "VKWebAppShowRequestBox" | "VKWebAppShowWallPostBox" | "VKWebAppStorageGet" | "VKWebAppStorageGetKeys" | "VKWebAppStorageSet" | "VKWebAppTapticImpactOccurred" | "VKWebAppTapticNotificationOccurred" | "VKWebAppTapticSelectionChanged" | "VKWebAppAddToFavorites" | "VKWebAppSendPayload">(method: K, props?: import("./types").RequestPropsMap[K] | undefined) => Promise<import("./types").ReceiveDataMap[K]>;
